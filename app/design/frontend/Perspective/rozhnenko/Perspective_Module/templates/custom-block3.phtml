<?php
/**
 * @var \Magento\Framework\View\Element\Template $block
 * @var \Magento\Framework\Escaper $escaper
 */

// Оголошення змінної $viewModel для magento2
$viewModel = $block->getViewModel();

// viewModels з hyva
/** @var \Hyva\Theme\Model\ViewModelRegistry $viewModels */
$viewModelHyva = $viewModels->require(\Perspective\Module\Model\ViewModel::class);

?>

<!-- ViewModel - це PHP-клас, який надає дані для відображення в темплейтах.
    Вони використовуються для виокремлення логіки з блоків та можуть містити логіку для обробки та отримання даних. -->

<!-- Використання ескейперів -->
<h2 class="<?= $escaper->escapeHtmlAttr('title') ?>"><?= $escaper->escapeHtml(__('3. ViewModel')) ?></h2>
<!-- Використання методу класу ViewModel -->
<p><?= $escaper->escapeHtml($viewModel->getTitle()) . $escaper->escapeHtml(__(' from magento2 viewModel')) ?></p>
<hr/>
<!-- Використання методу класу ViewModel з hyva -->
<p><?= $escaper->escapeHtml($viewModel->getTitle()) . $escaper->escapeHtml(__(' from hyva viewModelHyva')) ?></p>
<hr/>
<!-- Використання методу класу ViewModel з magento2 action method в xml але коли php class implements BlockInterface  -->
<!--<p>--><?php //= $escaper->escapeHtml($childBlock->getTitle()) . $escaper->escapeHtml(__(' from magento2 action method in xml')) ?><!--</p>-->



<?php
// Відмінність ViewModel від класів, полягає в відокремленні логіки отримання данних та бізнес логіки.
// Також ViewModel більш придатні для повторного використання та компонування.
?>

